@use "mixins";
@use "variables";
@use "functions";

@mixin styles() {
    @include mixins.sizing using($prefix) {
        @each $name, $space in variables.$u-spaces {
            @each $prop, $abbrev in (margin: m, padding: p) {
                #{$prefix}#{$abbrev}-#{$name} {
                    #{$prop}: functions.important($space);
                }
                #{$prefix}#{$abbrev}t-#{$name} {
                    #{$prop}-block-start: functions.important($space);
                }
                #{$prefix}#{$abbrev}r-#{$name} {
                    #{$prop}-inline-end: functions.important($space);
                }
                #{$prefix}#{$abbrev}b-#{$name} {
                    #{$prop}-block-end: functions.important($space);
                }
                #{$prefix}#{$abbrev}l-#{$name} {
                    #{$prop}-inline-start: functions.important($space);
                }
                #{$prefix}#{$abbrev}y-#{$name} {
                    #{$prop}-block-start: functions.important($space);
                    #{$prop}-block-end: functions.important($space);
                }
                #{$prefix}#{$abbrev}x-#{$name} {
                    #{$prop}-inline-start: functions.important($space);
                    #{$prop}-inline-end: functions.important($space);
                }
            }
        }

        $name: 0;
        $spacing: 1rem;
        @each $space in variables.$u-spaces-numeric {
            @each $prop, $abbrev in (margin: m, padding: p) {
                $value: 0;
                @if $space == 0 {
                    $value: 0;
                }
                @else {
                    $value: $spacing * $space;
                }
                #{$prefix}#{$abbrev}-#{$name} {
                    #{$prop}: functions.important($value);
                }
                #{$prefix}#{$abbrev}t-#{$name} {
                    #{$prop}-block-start: functions.important($value);
                }
                #{$prefix}#{$abbrev}r-#{$name} {
                    #{$prop}-inline-end: functions.important($value);
                }
                #{$prefix}#{$abbrev}b-#{$name} {
                    #{$prop}-block-end: functions.important($value);
                }
                #{$prefix}#{$abbrev}l-#{$name} {
                    #{$prop}-inline-start: functions.important($value);
                }
                #{$prefix}#{$abbrev}y-#{$name} {
                    #{$prop}-block-start: functions.important($value);
                    #{$prop}-block-end: functions.important($value);
                }
                #{$prefix}#{$abbrev}x-#{$name} {
                    #{$prop}-inline-start: functions.important($value);
                    #{$prop}-inline-end: functions.important($value);
                }
            }
            $name: $name + 1;
        }

        @each $prop, $abbrev in (margin: m) {
            #{$prefix}#{$abbrev}-auto {
                #{$prop}: functions.important(auto);
            }
            #{$prefix}#{$abbrev}t-auto {
                #{$prop}-block-start: functions.important(auto);
            }
            #{$prefix}#{$abbrev}r-auto {
                #{$prop}-inline-end: functions.important(auto);
            }
            #{$prefix}#{$abbrev}b-auto {
                #{$prop}-block-end: functions.important(auto);
            }
            #{$prefix}#{$abbrev}l-auto {
                #{$prop}-inline-start: functions.important(auto);
            }
            #{$prefix}#{$abbrev}y-auto {
                #{$prop}-block-start: functions.important(auto);
                #{$prop}-block-end: functions.important(auto);
            }
            #{$prefix}#{$abbrev}x-auto {
                #{$prop}-inline-start: functions.important(auto);
                #{$prop}-inline-end: functions.important(auto);
            }
        }
    }
}
