@use "sass:math";

// Columns placeholder to shorten css
%column {
    margin-left: var(--u-gutter-width);
    margin-right: var(--u-gutter-width);
    position: relative;
    width: 100%;
}

.container {
    max-width: var(--u-container-width, $u-containerWidth);
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--u-container-padding);
    padding-right: var(--u-container-padding);
    position: relative;
}

.row {
    margin: 0 calc(var(--u-gutter-width) * -1);
    flex-wrap: wrap;
    display: flex;
}

// Simple col definition
.col {
    flex: 1;
    margin: 0 var(--u-gutter-width);
}

.col-auto {
    margin: 0 var(--u-gutter-width);
    flex: 0 0 auto;
}

@for $i from 1 through 12 {
    .col-#{$i} {
        @extend %column;
    }

    .col-#{$i} {
        flex: 0 1 calc(#{percentage(math.div($i, 12))} - (var(--u-gutter-width) * 2));
        max-width: calc(#{percentage(math.div($i, 12))} - (var(--u-gutter-width) * 2));
    }
}

// Separate iteration to use @extend directive outside
// media queries
@each $name, $size in $u-sizes {
    @if($name != 'base') {
        @for $i from 1 through 12 {
            .#{$name}\:col-#{$i} {
                @extend %column;
            }
        }
    }
}

@include sizing($withbase: false) using ($prefix) {
    @for $i from 1 through 12 {
        #{$prefix}col-#{$i} {
            flex: 0 1 calc(#{percentage(math.div($i, 12))} - (var(--u-gutter-width) * 2));
            max-width: calc(#{percentage(math.div($i, 12))} - (var(--u-gutter-width) * 2));
        }
    }
}

%grid {
    display: grid;
    align-items: start;
    grid-template-columns: repeat(var(--grid-columns,12),1fr);
}

// New grid
@for $j from 1 through 12 {
    .grid-#{$j} {
        @extend %grid;
    }

    .grid-#{$j} {
        --grid-columns: #{$j};
    }
}

@include sizing($withbase: false) using ($prefix) {
    @for $i from 1 through 12 {
        #{$prefix}grid-#{$i} {
            --grid-columns: #{$i};
        }
    }
}
